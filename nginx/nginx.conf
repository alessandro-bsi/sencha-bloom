limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m;
limit_conn_zone $binary_remote_addr zone=addr:10m;

# Default redirect to HTTPS
server {
    listen 80 default_server;
    server_name _;

    return 301 https://$host$request_uri;
}

# Ganache (ganache.ssi.local)
server {
    listen 443 ssl;
    server_name ganache.ssi.local;

    ssl_certificate /etc/nginx/certs/ganache.ssi.local/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/ganache.ssi.local/privkey.pem;

    location ~ ^/(favicon.ico|robots.txt) {
        log_not_found off;
    }

    location / {
        #limit_req zone=one;
        #limit_conn addr 10;
        proxy_pass http://172.20.0.16:7545;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;

        # Additional headers for WebSocket support
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 600s;

        # add_header 'Access-Control-Allow-Origin' '*';
        # add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        # add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
        # add_header 'Access-Control-Max-Age' 1728000;



    }
}

# React App (web.ssi.local)
server {
    listen 443 ssl;
    server_name web.ssi.local;

    ssl_certificate /etc/nginx/certs/web.ssi.local/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/web.ssi.local/privkey.pem;

    location / {
        proxy_pass http://172.20.0.10:5000;
    }
}

# IPFS (ipfs.ssi.local)
server {
    listen 443 ssl;
    server_name ipfs.ssi.local;

    ssl_certificate /etc/nginx/certs/ipfs.ssi.local/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/ipfs.ssi.local/privkey.pem;

    location / {
        proxy_pass http://172.20.0.4:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

    }
}

# Secret Sharing Service (secrets.ssi.local)
server {
    listen 443 ssl;
    server_name secrets.ssi.local;

    ssl_certificate /etc/nginx/certs/secrets.ssi.local/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/secrets.ssi.local/privkey.pem;

    location / {
        proxy_pass http://172.20.0.3:6666;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Allow passing headers from the Node app to the client
        # Explicitly set CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Handle OPTIONS requests for CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
            add_header 'Access-Control-Max-Age' 86400;
            return 204;
        }
    }
}

# Verification Service (verifier.ssi.local)
server {
    listen 443 ssl;
    server_name verifier.ssi.local;

    ssl_certificate /etc/nginx/certs/verifier.ssi.local/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/verifier.ssi.local/privkey.pem;

    location / {
        proxy_pass http://172.20.0.11:5555;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Allow passing headers from the Node app to the client
        # Explicitly set CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Handle OPTIONS requests for CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
            add_header 'Access-Control-Max-Age' 86400;
            return 204;
        }
    }
}
